// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueryQuota.Infrastructure.Contexts;

#nullable disable

namespace QueryQuota.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QueryQuota.CORE.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84878F73-0C39-45DD-A61C-DB4AE17BD255",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f82509e1-a494-4937-9e41-5dd23c85d3c7",
                            Email = "userA@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERA@EXAMPLE.COM",
                            NormalizedUserName = "USERA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9nZBCm6tsn2WcU/f7qLzPyAEQ99j+F3da25zLAUXz/inO0sNDJhyKnqukWHLXMPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02c059f1-769f-47ed-ad59-4ba354bdf8ed",
                            TwoFactorEnabled = false,
                            UserName = "userA@example.com"
                        },
                        new
                        {
                            Id = "FFE95EC4-C3C8-4255-842C-7ECBAF332778",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7d5361a-93af-4030-bad9-b56fb6d311a0",
                            Email = "userB@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERB@EXAMPLE.COM",
                            NormalizedUserName = "USERB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJvFdn+vK1bHVRWMAhW/q3HG2vM+ZhgEmdsA+Ed4H5N/oOkBxeOgvIKaKrxy0Ugcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867ed95d-d705-4be8-b9f9-fe4c24549bc3",
                            TwoFactorEnabled = false,
                            UserName = "userB@example.com"
                        });
                });

            modelBuilder.Entity("QueryQuota.CORE.Entities.MyData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MyData");

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            CreatedAtUtc = new DateTime(2024, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            Data = "Alpha",
                            Status = 0
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            CreatedAtUtc = new DateTime(2025, 1, 5, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Data = "Beta",
                            Status = 0
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            CreatedAtUtc = new DateTime(2025, 1, 10, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            Data = "Gamma",
                            Status = 0
                        },
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            CreatedAtUtc = new DateTime(2025, 1, 15, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Data = "Delta",
                            Status = 0
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            CreatedAtUtc = new DateTime(2025, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = "Epsilon",
                            Status = 0
                        },
                        new
                        {
                            Id = "66666666-6666-6666-6666-666666666666",
                            CreatedAtUtc = new DateTime(2025, 2, 14, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Data = "Zeta",
                            Status = 0
                        },
                        new
                        {
                            Id = "77777777-7777-7777-7777-777777777777",
                            CreatedAtUtc = new DateTime(2025, 3, 3, 6, 10, 0, 0, DateTimeKind.Unspecified),
                            Data = "Eta",
                            Status = 0
                        },
                        new
                        {
                            Id = "88888888-8888-8888-8888-888888888888",
                            CreatedAtUtc = new DateTime(2025, 3, 15, 14, 50, 0, 0, DateTimeKind.Unspecified),
                            Data = "Theta",
                            Status = 0
                        },
                        new
                        {
                            Id = "99999999-9999-9999-9999-999999999999",
                            CreatedAtUtc = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Data = "Iota",
                            Status = 0
                        },
                        new
                        {
                            Id = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            CreatedAtUtc = new DateTime(2025, 4, 20, 22, 45, 0, 0, DateTimeKind.Unspecified),
                            Data = "Kappa",
                            Status = 0
                        });
                });

            modelBuilder.Entity("QueryQuota.CORE.Entities.QueryLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CreatedAtUtc");

                    b.ToTable("QueryLogs");

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            CreatedAtUtc = new DateTime(2025, 3, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "alpha",
                            UserId = "84878F73-0C39-45DD-A61C-DB4AE17BD255"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            CreatedAtUtc = new DateTime(2025, 3, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "beta",
                            UserId = "84878F73-0C39-45DD-A61C-DB4AE17BD255"
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            CreatedAtUtc = new DateTime(2025, 3, 2, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "gamma",
                            UserId = "84878F73-0C39-45DD-A61C-DB4AE17BD255"
                        },
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            CreatedAtUtc = new DateTime(2025, 3, 3, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "delta",
                            UserId = "84878F73-0C39-45DD-A61C-DB4AE17BD255"
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            CreatedAtUtc = new DateTime(2025, 3, 4, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "epsilon",
                            UserId = "84878F73-0C39-45DD-A61C-DB4AE17BD255"
                        },
                        new
                        {
                            Id = "66666666-6666-6666-6666-666666666666",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 6",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "77777777-7777-7777-7777-777777777777",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 7",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "88888888-8888-8888-8888-888888888888",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 8",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "99999999-9999-9999-9999-999999999999",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 14, 20, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 9",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 16, 40, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 10",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 11",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "cccccccc-cccc-cccc-cccc-cccccccccccc",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 12",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "dddddddd-dddd-dddd-dddd-dddddddddddd",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 12, 25, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 13",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 13, 50, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 14",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "ffffffff-ffff-ffff-ffff-ffffffffffff",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 15",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "11111111-aaaa-aaaa-aaaa-111111111111",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 17, 10, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 16",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "22222222-bbbb-bbbb-bbbb-222222222222",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 18, 25, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 17",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "33333333-cccc-cccc-cccc-333333333333",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 18",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "44444444-dddd-dddd-dddd-444444444444",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 19",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "55555555-eeee-eeee-eeee-555555555555",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 20",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "66666666-ffff-ffff-ffff-666666666666",
                            CreatedAtUtc = new DateTime(2025, 9, 1, 13, 5, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 21",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "77777777-abcd-abcd-abcd-777777777777",
                            CreatedAtUtc = new DateTime(2025, 2, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 22",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "88888888-abcd-abcd-abcd-888888888888",
                            CreatedAtUtc = new DateTime(2025, 2, 18, 15, 55, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 23",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "99999999-abcd-abcd-abcd-999999999999",
                            CreatedAtUtc = new DateTime(2025, 2, 19, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 24",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        },
                        new
                        {
                            Id = "aaaaaaaa-abcd-abcd-abcd-aaaaaaaaaaaa",
                            CreatedAtUtc = new DateTime(2025, 2, 20, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Term = "query 25",
                            UserId = "FFE95EC4-C3C8-4255-842C-7ECBAF332778"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QueryQuota.CORE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QueryQuota.CORE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueryQuota.CORE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QueryQuota.CORE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueryQuota.CORE.Entities.QueryLog", b =>
                {
                    b.HasOne("QueryQuota.CORE.Entities.ApplicationUser", "User")
                        .WithMany("QueryLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QueryQuota.CORE.Entities.ApplicationUser", b =>
                {
                    b.Navigation("QueryLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
