@using QueryQuota.UI.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login</h5>
                <button type="button" class="close" @onclick="Close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input class="form-control mb-2" @bind="Email" placeholder="Email" />
                <input class="form-control mb-2" type="password" @bind="Password" placeholder="Password" />
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="LoginUser">Login</button>
                <button class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    public bool IsVisible { get; private set; }

    private string Email = "";
    private string Password = "";
    private string? ErrorMessage;

    public void Show()
    {
        ErrorMessage = null;
        Email = "";
        Password = "";
        IsVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        IsVisible = false;
        OnClose.InvokeAsync(false);
    }

    private async Task LoginUser()
    {
        var user = new DTOs.UserForAuthenticationDTO { Email = Email, Password = Password };
        var result = await AuthService.LoginAsync(user);

        if (result.IsAuthenticationSuccessful)
        {
            IsVisible = false;
            await OnClose.InvokeAsync(true);
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorMessage = result.ErrorMessage;
        }
    }
}
